(= title "Sokoban")
(= width 16)
(= height 16)
(= debug nil)

; player
(= px 1)
(= py 1)
(= dx 0)
(= dy 0)

; other data
(= boxes (list (cons 1 3) (cons 3 5)))
(= targets (list (cons 1 6) (cons 5 7)))
(= exit (cons 14 14))

; map
(func outerWalls ()
    (fill 0 0 width 1 "f")
    (fill 0 (- height 1) width 1 "f")

    (fill 0 0 1 height "f")
    (fill (- width 1) 0 1 height "f")
)

; loading all sprites as ascii
(loadSprites '(
    ; a / player
    0  0  1  1  1  1  0  
    0  1  0  0  0  0  1  
    0  1  0  1  0  1  0  
    0  1  0  0  1  0  0  
    1  1  0  0  0  0  1  
    0  1  0  1  0  0  1  
    0  0  1  0  1  1  0

    ; b / box
    1  1  1  1  1  1  1  
    1  0  0  0  0  0  1  
    1  0  0  0  0  0  1  
    1  0  0  0  0  0  1  
    1  1  1  1  1  1  1  
    1  0  0  0  0  0  1  
    1  1  1  1  1  1  1

    ; c / target
    1  1  0  0  0  1  1  
    1  0  0  0  0  0  1  
    0  0  1  1  1  0  0  
    0  0  1  0  1  0  0  
    0  0  1  1  1  0  0  
    1  0  0  0  0  0  1  
    1  1  0  0  0  1  1

    ; d / door
    1  1  1  1  1  1  1  
    1  0  0  0  0  0  1  
    1  0  1  1  1  0  1  
    1  0  1  1  1  0  1  
    1  0  1  1  0  0  1  
    1  0  1  1  1  0  1  
    1  0  1  1  1  0  1

    ; e / player only tile
    1  0  1  0  1  0  1  
    0  1  0  1  0  1  0  
    1  0  1  0  1  0  1  
    0  1  0  1  0  1  0  
    1  0  1  0  1  0  1  
    0  1  0  1  0  1  0  
    1  0  1  0  1  0  1

    ; f / wall
    1  1  1  1  1  1  1  
    1  0  0  0  0  0  1  
    1  0  1  1  1  0  1  
    1  0  1  1  1  0  1  
    1  0  1  1  1  0  1  
    1  0  0  0  0  0  1  
    1  1  1  1  1  1  1

    ; g / active box
    1  1  1  1  1  1  1  
    1  0  0  0  0  0  1  
    1  0  1  1  1  0  1  
    1  0  0  0  0  0  1  
    1  1  1  1  1  1  1  
    1  0  0  0  0  0  1  
    1  1  1  1  1  1  1

    ; h / wall edge
    0  0  0  0  0  0  0  
    1  1  1  1  0  1  1  
    0  0  0  0  0  0  0  
    1  1  0  1  1  1  1  
    0  0  0  0  0  0  0  
    1  1  1  1  0  1  1  
    0  0  0  0  0  0  0
))

; edits the " " character to have a dot in the middle
(poke 0x4058 1)

; move player and detect collisions
(func moveBoxes ()
    (each (fn (box)
        ;if blank move box
        (if (and (is (car box) (+ px dx) ) (is (cdr box) py) (is " " (get (+ px dx dx) py))) (setcar box (+ px dx dx)))
        (if (and (is (cdr box) (+ py dy) ) (is (car box) px) (is " " (get px (+ py dy dy)))) (setcdr box (+ py dy dy)))

        ; if target move box
        (if (and (is (car box) (+ px dx) ) (is (cdr box) py) (is "c" (get (+ px dx dx) py))) (setcar box (+ px dx dx)))
        (if (and (is (cdr box) (+ py dy) ) (is (car box) px) (is "c" (get px (+ py dy dy)))) (setcdr box (+ py dy dy)))
    ) boxes)
)

(func checkTargets ()
    (= tCount 0)
    (each (fn (target)
        (if (is (get (car target) (cdr target)) "b") (put (car target) (cdr target) "g"))
    )targets)
)

(func checkBoxes ()
    (= closed 1)
    (each (fn (target)
        (if (is (get (car target) (cdr target)) "g") (= closed 0)
        (= closed 1))
    )targets)

    (put 0 0 closed)
)

(func move ()

    (if (or (is "f" (get (+ px dx) py)) (is "b" (get (+ px dx) py))) (= dx 0)
        (is "d" (get (+ px dx) py)) (checkBoxes)
        (= px (+ px dx))
    )
    (if (or (is "f" (get px (+ py dy))) (is "b" (get px (+ py dy)))) (= dy 0)
        (is "d" (get px (+ py dy))) (checkBoxes)
        (= py (+ py dy))
    )

    (= dx 0)
    (= dy 0)
)

; step, run every frame
(= step(fn ()
    ; clear screen to dots
    (color 15)
    (fill 0 0 width height " ")

    ; tiles
    (color 11)
    (outerWalls)
    (put 11 3 "f")

    ; targets
    (color 10)

    (each (fn (target)
        (put (car target) (cdr target) "c")
    ) targets)

    ; boxes
    (color 3)
    (moveBoxes)

    (each (fn (box)
        (put (car box) (cdr box) "b")
    ) boxes)

    (checkTargets)

    (color 9)
    (put (car exit) (cdr exit) "d")

    ; player
    (move)

    (color 7)
    (put px py "a")
))

; makes sure you only do 1 input per move
(= keydown (fn (k)
    (if (is k "up") (= dy -1)
       (is k "down") (= dy 1)
       (is k "left") (= dx -1)
       (is k "right") (= dx 1)
    )
))
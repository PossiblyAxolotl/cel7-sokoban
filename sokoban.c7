(= title "Sokoban")
(= width 16)
(= height 16)
(= debug nil)

; player
(= px 1)
(= py 1)
(= dx 0)
(= dy 0)

; other data
(= boxes ())
(= targets ())
(= exit ())

(= level 1)

; map
(func outerWalls ()
    (fill 0 0 width 1 "f")
    (fill 0 (- height 1) width 1 "f")

    (fill 0 0 1 height "f")
    (fill (- width 1) 0 1 height "f")
)

; levels     createLevelNUMBER places the player, boxes, targets and exit. run once. levelNUMBER runs every frame to build level walls
(func createLevel1 ()
    (= px 7)
    (= py 5)
    (= boxes (list (cons 6 12) (cons 9 12)))
    (= targets (list (cons 6 14) (cons 9 14)))
    (= exit (cons 8 2))
)
(func level1 ()
    (fill 5 1 1 15 "f") 
    (fill 10 1 1 15 "f")
    (put 7 12 "f")
    (put 8 12 "f")
)

(func createLevel2 ()
    (= px 7)
    (= py 5)
    (= boxes (list (cons 6 12) (cons 9 12)))
    (= targets (list (cons 6 14) (cons 9 14)))
    (= exit (cons 8 2))
)
(func level2 ()
    (fill 11 3 13 4 "f") 
    (put 4 6 "f")
)

; if level is 1, load level 1... etc..
(func createLevel ()
    (if (is level 1) (createLevel1)
        (is level 2) (createLevel2)
    )
)

; if level is 1, draw level 1... etc..
(func levelWalls ()
    (if (is level 1) (level1)
        (is level 2) (level2)
    )
)

(createLevel)

; loading all sprites as ascii
(loadSprites '(
    ; a / player
    0  0  1  1  1  1  0  
    0  1  0  0  0  0  1  
    0  1  0  1  0  1  0  
    0  1  0  0  1  0  0  
    1  1  0  0  0  0  1  
    0  1  0  1  0  0  1  
    0  0  1  0  1  1  0

    ; b / box
    1  1  1  1  1  1  1  
    1  0  0  0  0  0  1  
    1  0  0  0  0  0  1  
    1  0  0  0  0  0  1  
    1  1  1  1  1  1  1  
    1  0  0  0  0  0  1  
    1  1  1  1  1  1  1

    ; c / target
    1  1  0  0  0  1  1  
    1  0  0  0  0  0  1  
    0  0  1  1  1  0  0  
    0  0  1  0  1  0  0  
    0  0  1  1  1  0  0  
    1  0  0  0  0  0  1  
    1  1  0  0  0  1  1

    ; d / door
    1  1  1  1  1  1  1  
    1  0  0  0  0  0  1  
    1  0  1  1  1  0  1  
    1  0  1  1  1  0  1  
    1  0  1  1  0  0  1  
    1  0  1  1  1  0  1  
    1  0  1  1  1  0  1

    ; e / player only tile
    1  0  1  0  1  0  1  
    0  1  0  1  0  1  0  
    1  0  1  0  1  0  1  
    0  1  0  1  0  1  0  
    1  0  1  0  1  0  1  
    0  1  0  1  0  1  0  
    1  0  1  0  1  0  1

    ; f / wall
    1  1  1  1  1  1  1  
    1  0  0  0  0  0  1  
    1  0  1  1  1  0  1  
    1  0  1  1  1  0  1  
    1  0  1  1  1  0  1  
    1  0  0  0  0  0  1  
    1  1  1  1  1  1  1

    ; g / active box
    1  1  1  1  1  1  1  
    1  0  0  0  0  0  1  
    1  0  1  1  1  0  1  
    1  0  0  0  0  0  1  
    1  1  1  1  1  1  1  
    1  0  0  0  0  0  1  
    1  1  1  1  1  1  1
))

; edits the " " character to have a dot in the middle
(poke 0x4058 1)

; move player and detect collisions
(func moveBoxes ()
    (each (fn (box)
        ;if blank move box
        (put (car box) (cdr box) " ")
        (if (and (is (car box) (+ px dx) ) (is (cdr box) py) (is " " (get (+ px dx dx) py))) (setcar box (+ px dx dx)))
        (if (and (is (cdr box) (+ py dy) ) (is (car box) px) (is " " (get px (+ py dy dy)))) (setcdr box (+ py dy dy)))

        ; if target move box
        (if (and (is (car box) (+ px dx) ) (is (cdr box) py) (is "c" (get (+ px dx dx) py))) (setcar box (+ px dx dx)))
        (if (and (is (cdr box) (+ py dy) ) (is (car box) px) (is "c" (get px (+ py dy dy)))) (setcdr box (+ py dy dy)))
    ) boxes)
)

;   check which targets are active and make box
(func checkTargets ()
    ; runs through each target. if there is the letter b (represents boxes) in the spot the target is, it replaces it with g, the active box
    (each (fn (target)
        (if (is (get (car target) (cdr target)) "b") (put (car target) (cdr target) "g"))
    )targets)
)

; if all targets have boxes, door is open
(func checkBoxes ()
    ; if closed = 1, player can't leave. if closed = 0, player can leave
    (= closed 0)
    (each (fn (target)
        (if (is (get (car target) (cdr target)) "g") (put (car target) (cdr target) "g") ; this is just so it does something, the else part is what matters
        (= closed 1)) ; if there is not a box on a target, set closed to 1 until next check
    )targets)

    ;(put 0 0 closed)

    (if (is closed 0) (= level (+ level 1))) ; if door is open add 1 to the level count
    (createLevel) ; load level. if level doesn't change the door restarts
)

; player movement
(func move ()

    (if (or (is "f" (get (+ px dx) py)) (is "b" (get (+ px dx) py))) (= dx 0) ; if there's a wall or box in front of player, don't move
        (is "d" (get (+ px dx) py)) (checkBoxes) ; if there is a box, run the checkboxes stuff
        (= px (+ px dx)) ; if nothing went wrong move the player
    )
    (if (or (is "f" (get px (+ py dy))) (is "b" (get px (+ py dy)))) (= dy 0) ; same as the last 3 but vertical instead of horizontal
        (is "d" (get px (+ py dy))) (checkBoxes)
        (= py (+ py dy))
    )

    ; reset the dx and dy
    (= dx 0)
    (= dy 0)
)

; step, run every frame
(= step(fn ()
    ; clear screen to dots
    (color 15)
    (fill 0 0 width height " ")

    ; draw level tiles
    (color 11)
    (outerWalls)
    (levelWalls)

    ; draw targets
    (color 10)

    (each (fn (target)
        (put (car target) (cdr target) "c")
    ) targets)

    ; draw boxes and box logic
    (color 3)
    (each (fn (box)
        (put (car box) (cdr box) "b")
    ) boxes)

    (moveBoxes)

    (each (fn (box)
        (put (car box) (cdr box) "b")
    ) boxes)

    (checkTargets) ; check if boxes are on targets (could probably be called checkBoxes bozo)

    ; draw exit
    (color 9)
    (put (car exit) (cdr exit) "d")

    ; draw player & player logic
    (move)

    (color 7)
    (put px py "a")
))

; makes sure you only do 1 input per move, dx and dy are the selected inputs so we can check if they are valid in other parts
(= keydown (fn (k)
    (if (is k "up") (= dy -1)
       (is k "down") (= dy 1)
       (is k "left") (= dx -1)
       (is k "right") (= dx 1)
    )
))